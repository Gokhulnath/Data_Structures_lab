/*prototype.h*/

typedef struct mystudent
{
	char name[25];
	struct mystudent *next,*prev;
}student;

int isEmpty(struct mystudent* temp);
void DisplayList(student *hd);
student* createnode();
int search(student *hd,char temp[]);
void deletename(student *hd,char temp[]);
void insertlast(student *hd,char temp[]);
void order(student *hd);
void insertfirst(student *hd,char temp[]);
void insertmiddle(student *hd,char temp[],char temp1[]);








/*function.h*/


int isEmpty(struct mystudent* temp)
{
	if(temp->next==NULL)
		return 1;
	else
		return 0;
}

void DisplayList(student *hd)
{	student *t;
	printf("\n Displaying Names : \n"); 
	if( isEmpty(hd) )
		printf(" List is Empty "); 
	for(t=hd->next;t!=NULL;t=t->next)
		printf("Name: %s \n",t->name);
}

student* createnode()
{
	student *tmp;
	tmp=(student*)malloc(sizeof(student));
	tmp->next=tmp->prev=NULL;
	return tmp;
}

int search(student *hd,char temp[])
{	student *t=hd->next;
	if(isEmpty(hd))
		printf("the list is empty");
	else
	{	for(;t->next!=NULL;t=t->next)
		{
			if(strcmp(t->name,temp)==0)
				return 1;
		}
	}
	return 0;
}

void deletename(student *hd,char temp[])
{
	student *t=hd->next,*t1;
	if(isEmpty(hd))
		printf("the list is empty");
	else
	{	for(;t->next!=NULL;t=t->next)
		{
			if(strcmp(t->name,temp)==0)
			{
				t1=t;
				t->next->prev=t->prev;
				t->prev->next=t->next;
				free(t1);
			}
		}
	}
}

void insertlast(student *hd,char temp[])
{
	student *p,*t;
	p=createnode();
	strcpy(p->name,temp);
	t=hd;
	while(t->next!=NULL)
		t=t->next;
	p->next=t->next;
	t->next=p;
	p->prev=t;
	return;
}

void order(student *hd)
{	char temp[25];
	int flag;
	student *t1;
	if(isEmpty(hd))
		printf("the list is empty");
	else
	{	
		do
		{	flag=0;
			t1=hd->next;
			while(t1->next!=NULL)
			{
				if(strcmp(t1->name,t1->next->name)>0)
				{
					strcpy(temp,t1->name);
					strcpy(t1->name,t1->next->name);
					strcpy(t1->next->name,temp);
					flag=1;
				}
				t1=t1->next;
			}
		}while(flag);
		
}
	printf("Alpahbaetical Order :\n");
}

void insertfirst(student *hd,char temp[])
{
	student *p;
	p=createnode();
	strcpy(p->name,temp);
	p->prev=hd;
	p->next=hd->next;
	hd->next=p;
}

void insertmiddle(student *hd,char temp[],char temp1[])
{
	student *p,*t;
	p=createnode();
	strcpy(p->name,temp);
	t=hd;
	while(t->next!=NULL)
	{	if(strcmp(temp1,t->name)==0)
		{	printf("#\n");
			break;
		}
		t=t->next;
	}
	p->next=t->next;
	p->prev=t;
	t->next=p;
}















/*main.c*/#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include <string.h>
#include"prototype.h"
#include"function.h"
void main()
{
	student *hd=createnode();
	printf("Enter the total no. of students : ");
	int n,ch;
	char temp[25];
	scanf("%d",&n);
	for(int i=0;i<n;i++)
	{
		printf("Student %d : ",i+1);
		printf("\nName : ");
		scanf(" %[^\n]s",temp);
		insertlast(hd,temp);
		printf("\n");
	}
	char temp1[25],c;
	do
	{
		printf("\n\t1. Insert student name in front\n\t2. Insert student name at the end\n\t3. Insert a record after a given name in the list\n\t4. Search a given student in the list\n\t5. Delete a given student\n\t6. Display all student names\n\t7. Display the students in alphabetical order");
		printf("\nEnter your choice : ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1: printf("\nEnter the name : ");
					scanf(" %[^\n]s",temp);
					insertfirst(hd,temp);
					DisplayList(hd);
					break;
			case 2: printf("\nEnter the name : ");
					scanf(" %[^\n]s",temp);
					insertlast(hd,temp);
					DisplayList(hd);
					break;
			case 3: printf("\nEnter the name after which to be inserted : ");
					scanf(" %[^\n]s",temp1);
					printf("\nEnter the name : ");
					scanf(" %[^\n]s",temp);
					insertmiddle(hd,temp,temp1);
					DisplayList(hd);
					break;
			case 4: printf("Enter the name : ");
					scanf(" %[^\n]s",temp);
					int flag=search(hd,temp);
					if(flag)
						printf("\nRecord found\n");
					else
						printf("\nRecord not found\n");
					break;
			case 5: printf("\nEnter the name : ");
					scanf(" %[^\n]s",temp);
					deletename(hd,temp);
					DisplayList(hd);
					break;
			case 6: DisplayList(hd);
					break;
			case 7: order(hd);
					DisplayList(hd);
					break;
			default : printf("Invalid INPUT!!\n");
		}
		printf("Do you want to continue? (y/n) : ");
		scanf(" %c",&c);
		c=tolower(c);
	}while(c=='y');
}














/*Sample output*/
/*

Enter the total no. of students : 3
Student 1 : 
Name : a

Student 2 : 
Name : b

Student 3 : 
Name : c


	1. Insert student name in front
	2. Insert student name at the end
	3. Insert a record after a given name in the list
	4. Search a given student in the list
	5. Delete a given student
	6. Display all student names
	7. Display the students in alphabetical order
Enter your choice : 1

Enter the name : z

 Displaying Names : 
Name: z 
Name: a 
Name: b 
Name: c 
Do you want to continue? (y/n) : y

	1. Insert student name in front
	2. Insert student name at the end
	3. Insert a record after a given name in the list
	4. Search a given student in the list
	5. Delete a given student
	6. Display all student names
	7. Display the students in alphabetical order
Enter your choice : 2

Enter the name : y

 Displaying Names : 
Name: z 
Name: a 
Name: b 
Name: c 
Name: y 
Do you want to continue? (y/n) : y

	1. Insert student name in front
	2. Insert student name at the end
	3. Insert a record after a given name in the list
	4. Search a given student in the list
	5. Delete a given student
	6. Display all student names
	7. Display the students in alphabetical order
Enter your choice : 3

Enter the name after which to be inserted : a

Enter the name : g
#

 Displaying Names : 
Name: z 
Name: a 
Name: g 
Name: b 
Name: c 
Name: y 
Do you want to continue? (y/n) : y

	1. Insert student name in front
	2. Insert student name at the end
	3. Insert a record after a given name in the list
	4. Search a given student in the list
	5. Delete a given student
	6. Display all student names
	7. Display the students in alphabetical order
Enter your choice : 4
Enter the name : g

Record found
Do you want to continue? (y/n) : y

	1. Insert student name in front
	2. Insert student name at the end
	3. Insert a record after a given name in the list
	4. Search a given student in the list
	5. Delete a given student
	6. Display all student names
	7. Display the students in alphabetical order
Enter your choice : 5

Enter the name : a

 Displaying Names : 
Name: g 
Name: b 
Name: c 
Name: y 
Do you want to continue? (y/n) : y

	1. Insert student name in front
	2. Insert student name at the end
	3. Insert a record after a given name in the list
	4. Search a given student in the list
	5. Delete a given student
	6. Display all student names
	7. Display the students in alphabetical order
Enter your choice : 6

 Displaying Names : 
Name: g 
Name: b 
Name: c 
Name: y 
Do you want to continue? (y/n) : y

	1. Insert student name in front
	2. Insert student name at the end
	3. Insert a record after a given name in the list
	4. Search a given student in the list
	5. Delete a given student
	6. Display all student names
	7. Display the students in alphabetical order
Enter your choice : 7
Alpahbaetical Order :

 Displaying Names : 
Name: b 
Name: c 
Name: g 
Name: y 
Do you want to continue? (y/n) : n

*/